// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: proto/api/v1/glue.proto

package timex

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScheduleDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledStartDateTime  string   `protobuf:"bytes,1,opt,name=scheduledStartDateTime,proto3" json:"scheduledStartDateTime,omitempty"`
	RepeatEveryNumber       uint64   `protobuf:"varint,2,opt,name=repeatEveryNumber,proto3" json:"repeatEveryNumber,omitempty"`
	RepeatEvery             string   `protobuf:"bytes,3,opt,name=repeatEvery,proto3" json:"repeatEvery,omitempty"`
	EndOption               *string  `protobuf:"bytes,4,opt,name=endOption,proto3,oneof" json:"endOption,omitempty"`
	EndDate                 *string  `protobuf:"bytes,5,opt,name=endDate,proto3,oneof" json:"endDate,omitempty"`
	OccurrenceValue         *uint64  `protobuf:"varint,6,opt,name=occurrenceValue,proto3,oneof" json:"occurrenceValue,omitempty"`
	WeekDaysForRepeatEvery  []string `protobuf:"bytes,7,rep,name=weekDaysForRepeatEvery,proto3" json:"weekDaysForRepeatEvery,omitempty"`
	MonthOptions            *string  `protobuf:"bytes,8,opt,name=monthOptions,proto3,oneof" json:"monthOptions,omitempty"`
	OnDayValueForMonth      *int64   `protobuf:"varint,9,opt,name=onDayValueForMonth,proto3,oneof" json:"onDayValueForMonth,omitempty"`
	DayCategoryForMonth     *string  `protobuf:"bytes,10,opt,name=dayCategoryForMonth,proto3,oneof" json:"dayCategoryForMonth,omitempty"`
	WeekDayForMonth         *string  `protobuf:"bytes,11,opt,name=weekDayForMonth,proto3,oneof" json:"weekDayForMonth,omitempty"`
	YearOptions             *string  `protobuf:"bytes,12,opt,name=yearOptions,proto3,oneof" json:"yearOptions,omitempty"`
	MonthWithDayForYear     *string  `protobuf:"bytes,13,opt,name=monthWithDayForYear,proto3,oneof" json:"monthWithDayForYear,omitempty"`
	OnDayValueForYear       *int64   `protobuf:"varint,14,opt,name=onDayValueForYear,proto3,oneof" json:"onDayValueForYear,omitempty"`
	DayCategoryForYear      *string  `protobuf:"bytes,15,opt,name=dayCategoryForYear,proto3,oneof" json:"dayCategoryForYear,omitempty"`
	WeekDayForYear          *string  `protobuf:"bytes,16,opt,name=weekDayForYear,proto3,oneof" json:"weekDayForYear,omitempty"`
	MonthWithWeekDayForYear *string  `protobuf:"bytes,17,opt,name=monthWithWeekDayForYear,proto3,oneof" json:"monthWithWeekDayForYear,omitempty"`
}

func (x *ScheduleDetails) Reset() {
	*x = ScheduleDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_v1_glue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleDetails) ProtoMessage() {}

func (x *ScheduleDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_v1_glue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleDetails.ProtoReflect.Descriptor instead.
func (*ScheduleDetails) Descriptor() ([]byte, []int) {
	return file_proto_api_v1_glue_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduleDetails) GetScheduledStartDateTime() string {
	if x != nil {
		return x.ScheduledStartDateTime
	}
	return ""
}

func (x *ScheduleDetails) GetRepeatEveryNumber() uint64 {
	if x != nil {
		return x.RepeatEveryNumber
	}
	return 0
}

func (x *ScheduleDetails) GetRepeatEvery() string {
	if x != nil {
		return x.RepeatEvery
	}
	return ""
}

func (x *ScheduleDetails) GetEndOption() string {
	if x != nil && x.EndOption != nil {
		return *x.EndOption
	}
	return ""
}

func (x *ScheduleDetails) GetEndDate() string {
	if x != nil && x.EndDate != nil {
		return *x.EndDate
	}
	return ""
}

func (x *ScheduleDetails) GetOccurrenceValue() uint64 {
	if x != nil && x.OccurrenceValue != nil {
		return *x.OccurrenceValue
	}
	return 0
}

func (x *ScheduleDetails) GetWeekDaysForRepeatEvery() []string {
	if x != nil {
		return x.WeekDaysForRepeatEvery
	}
	return nil
}

func (x *ScheduleDetails) GetMonthOptions() string {
	if x != nil && x.MonthOptions != nil {
		return *x.MonthOptions
	}
	return ""
}

func (x *ScheduleDetails) GetOnDayValueForMonth() int64 {
	if x != nil && x.OnDayValueForMonth != nil {
		return *x.OnDayValueForMonth
	}
	return 0
}

func (x *ScheduleDetails) GetDayCategoryForMonth() string {
	if x != nil && x.DayCategoryForMonth != nil {
		return *x.DayCategoryForMonth
	}
	return ""
}

func (x *ScheduleDetails) GetWeekDayForMonth() string {
	if x != nil && x.WeekDayForMonth != nil {
		return *x.WeekDayForMonth
	}
	return ""
}

func (x *ScheduleDetails) GetYearOptions() string {
	if x != nil && x.YearOptions != nil {
		return *x.YearOptions
	}
	return ""
}

func (x *ScheduleDetails) GetMonthWithDayForYear() string {
	if x != nil && x.MonthWithDayForYear != nil {
		return *x.MonthWithDayForYear
	}
	return ""
}

func (x *ScheduleDetails) GetOnDayValueForYear() int64 {
	if x != nil && x.OnDayValueForYear != nil {
		return *x.OnDayValueForYear
	}
	return 0
}

func (x *ScheduleDetails) GetDayCategoryForYear() string {
	if x != nil && x.DayCategoryForYear != nil {
		return *x.DayCategoryForYear
	}
	return ""
}

func (x *ScheduleDetails) GetWeekDayForYear() string {
	if x != nil && x.WeekDayForYear != nil {
		return *x.WeekDayForYear
	}
	return ""
}

func (x *ScheduleDetails) GetMonthWithWeekDayForYear() string {
	if x != nil && x.MonthWithWeekDayForYear != nil {
		return *x.MonthWithWeekDayForYear
	}
	return ""
}

type DetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details                 *ScheduleDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	PreviousScheduledDetail string           `protobuf:"bytes,2,opt,name=previousScheduledDetail,proto3" json:"previousScheduledDetail,omitempty"`
	RangedStartDate         string           `protobuf:"bytes,3,opt,name=rangedStartDate,proto3" json:"rangedStartDate,omitempty"`
	RangedEndDate           string           `protobuf:"bytes,4,opt,name=rangedEndDate,proto3" json:"rangedEndDate,omitempty"`
}

func (x *DetailRequest) Reset() {
	*x = DetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_v1_glue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailRequest) ProtoMessage() {}

func (x *DetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_v1_glue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailRequest.ProtoReflect.Descriptor instead.
func (*DetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_v1_glue_proto_rawDescGZIP(), []int{1}
}

func (x *DetailRequest) GetDetails() *ScheduleDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *DetailRequest) GetPreviousScheduledDetail() string {
	if x != nil {
		return x.PreviousScheduledDetail
	}
	return ""
}

func (x *DetailRequest) GetRangedStartDate() string {
	if x != nil {
		return x.RangedStartDate
	}
	return ""
}

func (x *DetailRequest) GetRangedEndDate() string {
	if x != nil {
		return x.RangedEndDate
	}
	return ""
}

type DetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledDateTime []string `protobuf:"bytes,1,rep,name=scheduledDateTime,proto3" json:"scheduledDateTime,omitempty"`
}

func (x *DetailResponse) Reset() {
	*x = DetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_v1_glue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailResponse) ProtoMessage() {}

func (x *DetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_v1_glue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailResponse.ProtoReflect.Descriptor instead.
func (*DetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_v1_glue_proto_rawDescGZIP(), []int{2}
}

func (x *DetailResponse) GetScheduledDateTime() []string {
	if x != nil {
		return x.ScheduledDateTime
	}
	return nil
}

var File_proto_api_v1_glue_proto protoreflect.FileDescriptor

var file_proto_api_v1_glue_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x78,
	0x22, 0xbe, 0x08, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0f, 0x6f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x16, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x77,
	0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x12, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x12, 0x6f, 0x6e,
	0x44, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x64, 0x61, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x13, 0x64, 0x61, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46,
	0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x77, 0x65,
	0x65, 0x6b, 0x44, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0f, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x46, 0x6f,
	0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x79, 0x65, 0x61,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0b, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x79,
	0x46, 0x6f, 0x72, 0x59, 0x65, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x79, 0x46, 0x6f, 0x72,
	0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x59, 0x65, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x09, 0x52, 0x11, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x46, 0x6f, 0x72, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x64, 0x61,
	0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x59, 0x65, 0x61, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x12, 0x64, 0x61, 0x79, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x59, 0x65, 0x61,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x44,
	0x61, 0x79, 0x46, 0x6f, 0x72, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79,
	0x46, 0x6f, 0x72, 0x59, 0x65, 0x61, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x17, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61,
	0x79, 0x46, 0x6f, 0x72, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x65, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f,
	0x6e, 0x44, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x61, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x65,
	0x65, 0x6b, 0x44, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x79, 0x46, 0x6f,
	0x72, 0x59, 0x65, 0x61, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x59, 0x65, 0x61, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x64, 0x61, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x59, 0x65,
	0x61, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x46, 0x6f,
	0x72, 0x59, 0x65, 0x61, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x57,
	0x69, 0x74, 0x68, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x59, 0x65, 0x61,
	0x72, 0x22, 0xcb, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x78, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x3e, 0x0a, 0x0e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x7c, 0x0a, 0x07, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x14, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x78, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x78,
	0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12, 0x15, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x78, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x15, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x78, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1d, 0x5a,
	0x1b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x77, 0x61,
	0x68, 0x61, 0x72, 0x32, 0x37, 0x33, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x78, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_api_v1_glue_proto_rawDescOnce sync.Once
	file_proto_api_v1_glue_proto_rawDescData = file_proto_api_v1_glue_proto_rawDesc
)

func file_proto_api_v1_glue_proto_rawDescGZIP() []byte {
	file_proto_api_v1_glue_proto_rawDescOnce.Do(func() {
		file_proto_api_v1_glue_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_api_v1_glue_proto_rawDescData)
	})
	return file_proto_api_v1_glue_proto_rawDescData
}

var file_proto_api_v1_glue_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_api_v1_glue_proto_goTypes = []interface{}{
	(*ScheduleDetails)(nil), // 0: timex.ScheduleDetails
	(*DetailRequest)(nil),   // 1: timex.DetailRequest
	(*DetailResponse)(nil),  // 2: timex.DetailResponse
}
var file_proto_api_v1_glue_proto_depIdxs = []int32{
	0, // 0: timex.DetailRequest.details:type_name -> timex.ScheduleDetails
	1, // 1: timex.Machine.Send:input_type -> timex.DetailRequest
	2, // 2: timex.Machine.SendTest:input_type -> timex.DetailResponse
	2, // 3: timex.Machine.Send:output_type -> timex.DetailResponse
	2, // 4: timex.Machine.SendTest:output_type -> timex.DetailResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_api_v1_glue_proto_init() }
func file_proto_api_v1_glue_proto_init() {
	if File_proto_api_v1_glue_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_api_v1_glue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_v1_glue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_v1_glue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_api_v1_glue_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_api_v1_glue_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_api_v1_glue_proto_goTypes,
		DependencyIndexes: file_proto_api_v1_glue_proto_depIdxs,
		MessageInfos:      file_proto_api_v1_glue_proto_msgTypes,
	}.Build()
	File_proto_api_v1_glue_proto = out.File
	file_proto_api_v1_glue_proto_rawDesc = nil
	file_proto_api_v1_glue_proto_goTypes = nil
	file_proto_api_v1_glue_proto_depIdxs = nil
}
